@using System.Collections.Specialized
@using Glass.Mapper.Sc
@using Glass.Mapper.Sc.Web.Mvc
@using Sitecore.Globalization
@using Sitecore.Links
@using Sitecore.Resources.Media
@using DEWAXP.Feature.CommonComponents.Models.Renderings
@model List<HeroSlide>

@if (Model != null && Model.Count > 0)
{
    <div class="m1-hero" data-component="m1-hero">
        <div class="m1-hero__container">
            <div class="m1-hero__carousel">
                @foreach (var slide in Model)
                {
                    string AltHtml = slide.Image != null && !String.IsNullOrEmpty(slide.Image.Alt) ? string.Format("data-alt=\"{0}\"", slide.Image.Alt) : "";
                    <div class="m1-hero__carousel-slide">
                        <div class="m1-hero__carousel-slide-inner" @Html.Raw(AltHtml)>
                            @if (slide.Image != null)
                            {
                                <div class="m1-hero__carousel-slide-image" data-src="@slide.Image.Src">
                                    <img src="/images/trans.png" alt="@slide.Image.Alt" />
                                </div>
                                <div class="m1-hero__carousel-slide-gradient" data-src="/images/m1_gradient.png">
                                    <img src="/images/trans.png" alt="@slide.Image.Alt" />
                                </div>
                            }
                            <div class="m1-hero__carousel-slide-panel">
                                <div class="m1-hero__carousel-slide-panel--inner">
                                    <div class="m1-hero__carousel-slide-panel-title">@Html.Glass().Editable(slide, x => x.Header)</div>
                                    <div class="m1-hero__carousel-slide-panel-text">@Html.Glass().Editable(slide, x => x.Subheader)</div>

                                    @if (slide.RedirectLink != null)
                                    {
                                        <a href="@LinkManager.GetItemUrl(slide.RedirectLink)" class="button button--fithtiary button--next">
                                            @Html.Glass().Editable(slide, x => x.RedirectText)
                                        </a>
                                    }
                                    else if (slide.DownloadLink != null && slide.DownloadLink.HasValue())
                                    {
                                        using (Html.Glass().BeginRenderLink(slide, x => x.DownloadLink, attributes: new { @class = "button button--fithtiary button--next" }))
                                        {
                                            @Html.Glass().Editable(slide, x => x.RedirectText)
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="m1-hero__carousel-nav">
            <div class="m1-hero__carousel-nav-outer">
                <div class="m1-hero__carousel-nav-inner">
                    <div role="button" data-role="none" class="m1-hero__carousel-button--prev"><span class="aria-only">prev</span></div>
                    <div role="button" data-role="none" class="m1-hero__carousel-button--next"><span class="aria-only">next</span></div>
                </div>
                <div class="m1-hero__carousel-nav-inner-btn">
                    <div role="button" class="m1-hero__carousel-button-play-pause  m1-hero__carousel-button--pause"><span class="aria-only">pause</span></div>
                </div>
            </div>
        </div>

    </div>
}
