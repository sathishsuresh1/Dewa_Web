@using DEWAXP.Foundation.Integration.APIHandler.Models.Response.SmartSurvey
@using Sitecore.Globalization
@model DEWAXP.Foundation.Integration.APIHandler.Models.Response.SmartSurvey.Questiontypeslist
@{
    string groupnumber = ViewData["group"].ToString();
    string status = ViewData["status"] != null ? ViewData["status"].ToString() : string.Empty;
    bool displayonly = ((!string.IsNullOrWhiteSpace(Model.Displayonly) && Model.Displayonly.Equals("X")) || (!string.IsNullOrWhiteSpace(status) && status.Equals("D")));

}
@if (!displayonly)
{
    <div class="form-field form-field--text">
        @if (!string.IsNullOrWhiteSpace(Model.Asheading) && Model.Asheading.Equals("X")) { }
        else
        {
            <label for="form-field-group@(groupnumber)_question@(Model.Questionnumber)" class="form-field__label">
                @Model.Question
            </label>
        }
        <div class="form-field">
            @if (!string.IsNullOrWhiteSpace(Model.Alignment) && Model.Alignment.Equals("R"))
            {
                <div class="form-field--6">
                    <label for="form-field-group@(groupnumber)_question@(Model.Questionnumber)" class="form-field__label">
                        @Translate.Text("start date label")
                    </label>
                    <span class="form-field__input-wrapper form-field__input-wrapper--datepicker">
                        <input class="form-field__input form-field__input--text form-field__input--datepicker picker__input picker__input-main-en  form-field__input--datepicker-binded"
                               id="form-field-group@(groupnumber)_question@(Model.Questionnumber)From"
                               name="form-field-group@(groupnumber)_question@(Model.Questionnumber)From"
                               type="text"
                               placeholder="@Model.Questionplaceholder"
                               aria-describedby="description-for-group@(groupnumber)_question@(Model.Questionnumber)From"
                               data-parsley-errors-container="#description-for-group@(groupnumber)_question@(Model.Questionnumber)From"
                               data-el="datepicker"
                               data-el-to=".form-field-group@(groupnumber)_question@(Model.Questionnumber)To"
                               data-el-to_min="1"
                               data-el-to_max="10000000"
                               data-parsley-id="24"
                               @(!string.IsNullOrWhiteSpace(Model.Mandatory) && Model.Mandatory.Equals("X") ? "required" : string.Empty)
                               aria-haspopup="true"
                               aria-expanded="false"
                               aria-readonly="false"
                               data-picker-options="{&quot;selectYears&quot;: 50 , &quot;selectMonths&quot;: true }"
                               data-parsley-required-message="@Model.Questionplaceholder"
                               aria-owns="form-field-group@(groupnumber)_question@(Model.Questionnumber)From_root">
                    </span>
                    <div id="description-for-group@(groupnumber)_question@(Model.Questionnumber)From" class="form-field__messages">
                        <p class="form-field__description">@Model.Questionnote</p>
                    </div>
                </div>
                <div class="form-field--6">
                    <label for="form-field-group@(groupnumber)_question@(Model.Questionnumber)" class="form-field__label">
                        @Translate.Text("end date label")
                    </label>
                    <span class="form-field__input-wrapper form-field__input-wrapper--datepicker">
                        <input class="form-field-group@(groupnumber)_question@(Model.Questionnumber)To form-field__input form-field__input--text form-field__input--datepicker picker__input picker__input-main-en"
                               id="form-field-group@(groupnumber)_question@(Model.Questionnumber)To"
                               name="form-field-group@(groupnumber)_question@(Model.Questionnumber)To"
                               type="text"
                               placeholder="@Model.Questionplaceholder"
                               aria-describedby="description-for-group@(groupnumber)_question@(Model.Questionnumber)To"
                               data-parsley-errors-container="#description-for-group@(groupnumber)_question@(Model.Questionnumber)To"
                               data-el="datepicker"
                               data-parsley-id="26"
                               @(!string.IsNullOrWhiteSpace(Model.Mandatory) && Model.Mandatory.Equals("X") ? "required" : string.Empty)
                               aria-haspopup="true"
                               aria-expanded="false"
                               aria-readonly="false"
                               data-picker-options="{&quot;selectYears&quot;: 50 , &quot;selectMonths&quot;: true }"
                               data-parsley-required-message="@Model.Questionplaceholder"
                               aria-owns="form-field-group@(groupnumber)_question@(Model.Questionnumber)To_root">
                    </span>
                    <div id="description-for-group@(groupnumber)_question@(Model.Questionnumber)To" class="form-field__messages">
                        <p class="form-field__description">@Model.Questionnote</p>
                    </div>
                </div>
            }
            else
            {
                <div class="form-field form-field--text">
                    @*<label for="form-field-group@(groupnumber)_question@(Model.Questionnumber)" class="form-field__label">
                            To
                        </label>*@
                    <span class="form-field__input-wrapper form-field__input-wrapper--datepicker">
                        <input class="form-field__input form-field__input--text form-field__input--datepicker picker__input picker__input-main-en"
                               id="form-field-group@(groupnumber)_question@(Model.Questionnumber)"
                               name="form-field-group@(groupnumber)_question@(Model.Questionnumber)"
                               type="text"
                               placeholder="@Model.Questionplaceholder"
                               aria-describedby="description-for-group@(groupnumber)_question@(Model.Questionnumber)"
                               data-parsley-errors-container="#description-for-group@(groupnumber)_question@(Model.Questionnumber)"
                               data-el="datepicker"
                               data-parsley-id="26"
                               @(!string.IsNullOrWhiteSpace(Model.Mandatory) && Model.Mandatory.Equals("X") ? "required" : string.Empty)
                               aria-haspopup="true"
                               aria-expanded="false"
                               aria-readonly="false"
                               data-picker-options="{&quot;selectYears&quot;: 50 , &quot;selectMonths&quot;: true }"
                               data-parsley-required-message="@Model.Questionplaceholder"
                               aria-owns="form-field-group@(groupnumber)_question@(Model.Questionnumber)">
                    </span>
                    <div id="description-for-group@(groupnumber)_question@(Model.Questionnumber)" class="form-field__messages">
                    </div>
                </div>
            }
        </div>

    </div>
}
else
{
    <div class="form-field form-field--text">
        @if (!string.IsNullOrWhiteSpace(Model.Asheading) && !Model.Asheading.Equals("X")) { }
        else
        {
            <label for="form-field-group@(groupnumber)_question@(Model.Questionnumber)" class="form-field__label form-field__label--readonly">
                @Model.Question
                <span class="form-field__label-required aria-only">(@(!string.IsNullOrWhiteSpace(Model.Mandatory) && Model.Mandatory.Equals("X") ? "required" : "optional"))</span>
            </label>
        }
        <span class="form-field__input-wrapper form-field__input-wrapper--readonly">
            <input class="form-field__input form-field__input--text form-field__input--readonly @(displayonly ? " disabled" : string.Empty)"
                   id="form-field-group@(groupnumber)_question@(Model.Questionnumber)"
                   name="form-field-group@(groupnumber)_question@(Model.Questionnumber)"
                   type="text" placeholder="@Model.Questionplaceholder"
                   value="@GetSurveyValue(Model)"
                   @(displayonly ? " disabled" : string.Empty) 
                   aria-describedby="description-for-group@(groupnumber)_question@(Model.Questionnumber)"
                   data-parsley-errors-container="#description-for-group@(groupnumber)_question@(Model.Questionnumber)"
                   @(!string.IsNullOrWhiteSpace(Model.Mandatory) && Model.Mandatory.Equals("X") ? "required" : string.Empty)
                   data-parsley-required-message="@Model.Questionplaceholder"
                   data-parsley-trigger="focusout"
                   data-parsley-id="6">
        </span>
        <div id="description-for-group@(groupnumber)_question@(Model.Questionnumber)" class="form-field__messages">
            <p class="form-field__description">@Model.Questionnote</p>
        </div>
    </div>
    @functions
    {
        public string GetSurveyValue(Questiontypeslist questiontypeslist)
        {
            if (!string.IsNullOrWhiteSpace(questiontypeslist.Alignment) && questiontypeslist.Alignment.Equals("R"))
            {
                string[] dates = questiontypeslist.Surveyfeedback.Split('-');
                if (dates != null && dates.Length > 1)
                {
                    DateTime fromTime;
                    DateTime ToTime;
                    DateTime.TryParseExact(dates[0], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out fromTime);
                    DateTime.TryParseExact(dates[1], "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out ToTime);
                    if (fromTime != null && ToTime != null && fromTime.Ticks > 0 && ToTime.Ticks > 0)
                    {
                        return string.Format("{0} - {1}", fromTime.ToString("dd MMM yyyy"), ToTime.ToString("dd MMM yyyy"));
                    }
                }
            }
            else
            {
                DateTime fromTime;
                DateTime.TryParseExact(questiontypeslist.Surveyfeedback, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out fromTime);
                if (fromTime != null && fromTime.Ticks > 0)
                {
                    return fromTime.ToString("dd MMM yyyy");
                }
            }
            return "";
        }
    }
}