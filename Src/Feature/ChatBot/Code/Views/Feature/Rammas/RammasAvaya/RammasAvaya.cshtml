@using System.Web.Mvc.Razor
@using Sitecore.Globalization
@using Sitecore.Mvc
@using Sitecore.Mvc.Configuration
@using DEWAXP.Feature.Rammas.Helpers
@using DEWAXP.Feature.Rammas.Models.DirectLine
@model DEWAXP.Feature.Rammas.Models.DirectLine.RammasAvayaClientModel

<div class="box box--7">
    <div class="grid" id="step1a">
        <div class="grid__row">
            <div class="grid__column grid__column--6">
                <br />
                <h3 id="msg">Please provide your contact details below</h3>
                <br />
            </div>
        </div>
    </div>
    <div class="grid" id="step1b">
        <div class="grid__row">
            <div class="grid__column grid__column--6">
                
                <form method="get" action="#" class="form" data-form="true" id="chat_form" data-parsley-focus="true">
                    <div class="form-field form-field--text">

                        <label for="txFN" class="form-field__label">
                            First Name
                            <span class="form-field__label-required aria-only">(required)</span>

                        </label>

                        <span class="form-field__input-wrapper">
                            <input class="form-field__input form-field__input--text"
                                   id="txFN"
                                   name="txFN"
                                   type="text"
                                   placeholder="Enter first name"
                                   aria-describedby="description-for-iynz6r381"
                                   data-parsley-errors-container="#description-for-iynz6r381"
                                   required
                                   data-parsley-required-message="This field is required" />
                        </span>

                        <div id="description-for-iynz6r381" class="form-field__messages">
                        </div>
                    </div>
                    <div class="form-field form-field--text">

                        <label for="txLN" class="form-field__label">
                            Last Name
                            <span class="form-field__label-required aria-only">(required)</span>

                        </label>

                        <span class="form-field__input-wrapper">
                            <input class="form-field__input form-field__input--text"
                                   id="txLN"
                                   name="txLN"
                                   type="text"
                                   placeholder="Enter last name"
                                   aria-describedby="description-for-123"
                                   data-parsley-errors-container="#description-for-123"
                                   required
                                   data-parsley-required-message="This field is required" />
                        </span>

                        <div id="description-for-123" class="form-field__messages">
                        </div>
                    </div>

                    <div class="form-field form-field--text">
                        <label for="txEmail" class="form-field__label">
                            Email
                            <span class="form-field__label-required aria-only">(required)</span>
                        </label>
                        <span class="form-field__input-wrapper">
                            <input class="form-field__input form-field__input--text"
                                   id="txEmail"
                                   name="txEmail"
                                   type="email"
                                   placeholder="Enter your email address"
                                   aria-describedby="description-for-alppp3rvk"
                                   data-parsley-errors-container="#description-for-alppp3rvk"
                                   data-parsley-error-message="Enter valid email address"
                                   required
                                   data-parsley-required-message="This field is required" />
                        </span>

                        <div id="description-for-alppp3rvk" class="form-field__messages">
                        </div>

                    </div>
                    <div class="form-field form-field--text">
                        <label for="MobileNumber" class="form-field__label">
                            Mobile Number
                            <span class="form-field__label-required aria-only">(required)</span>
                        </label>
                        <span class="form-field__input-wrapper">
                            <input class="form-field__input form-field__input--text"
                                   id="MobileNumber"
                                   name="MobileNumber"
                                   type="tel"
                                   placeholder="Enter mobile no e.g. 05xxxxxxxx"
                                   aria-describedby="description-for-MobileNumber"
                                   data-parsley-errors-container="#description-for-MobileNumber"
                                   required
                                   maxlength="10"
                                   data-parsley-required-message="This field is required"
                                   data-parsley-type="number"
                                   data-parsley-error-message="Enter valid mobile number" />
                        </span>
                        <div id="description-for-MobileNumber" class="form-field__messages">
                        </div>
                    </div>

                    <div class="form-field__button">
                        <button type="submit" class="button button--primary">Start Chat</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
    <div class="grid j125-rammasui hidden" id="step2a">
        <div class="grid__row">
            <div class="grid__column grid__column--12">
                <div class='m55a-rammas' data-component="m55a-rammas" id="BotChatGoesHere" data-title="@Translate.Text("rammas title")">
                    <div class="dewa-bot-message-wrapper list hide m55a-agent-typing">
                        <div class="dewa-bot-message wc-message-from-bot">
                            <div class="dewa-bot-message-content">
                                <div>
                                    <div class="format-markdown">
                                        <img class="m55a-rammas--loading-icon" src="../../images/rammas_loading.gif">&nbsp;Agent is typing
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="dewa-bot-message-from dewa-bot-message-from-bot"><span></span></div>
                    </div>
                    <div class="dewa-bot-message-wrapper list hide m55a-rammas--loading">
                        <div class="dewa-bot-message wc-message-from-bot">
                            <div class="dewa-bot-message-content">
                                <div>
                                    <div class="format-markdown">
                                        <img class="m55a-rammas--loading-icon" src="../../images/rammas_loading.gif">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="dewa-bot-message-from dewa-bot-message-from-bot"><span></span></div>
                    </div>
                    <div class="dewaBotChat" id="dvOuter">
                        <div class="dewa-bot-grunt bumessage-panel" id="div_exp">
                            <div class="dewa-bot-message-pane">
                                <div class="dewa-bot-message-groups">
                                    <div class="dewa-bot-message-group-content" id="bot_chat">
                                        <div class="dewa-bot-message-group-welcome">
                                            <img class="m55a-rammas--welcome_icon" src="/images/rammas_icon.gif">
                                            <div class="m5a-rammas--welcome_FL">@Translate.Text("rammas.FL")</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="dewa-bot-console">
                            <div class="dewa-bot-textbox">
                                <input type="text" class="dewa-bot-shellinput" value="" id="cid" placeholder="@Translate.Text("Rammas Ask Rammas")">
                            </div>
                            <label class="dewa-bot-send" id="btSend">
                            </label>
                        </div>
                    </div>

                    <div class="m39-modal m39-modal--new m55a-rammas--shareModal m39-modal--nofocus" data-component="m39-modal" id="modal_true">
                        <button data-trigger="true" class="m39-modal__trigger export_modal"></button>
                        <div data-content="true" class="m39-modal__container" role="dialog" aria-expanded="false">
                            <div class="m39-modal__dialog">
                                <div class="j105-drrg hidden">
                                    <div class="m66-preloader j105-drrg--loader fromloader">
                                        <div class="grid">
                                            <div class="grid__row">
                                                <div class="grid__column grid__column--12">
                                                    <h2 class="text__section-subtitle">@Translate.Text("Rammas Please Wait")</h2>
                                                    <div class="loader"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="m39-modal__header">
                                    <div class="m55a-rammas--disclaimer_prev icon-new-arrow-right"></div>
                                    <div class="m39-modal__title">@Translate.Text("Rammas Export Chat")</div>
                                    <a data-close="true" class="m39-modal__button--close"></a>
                                </div>
                                <div class="m39-modal__content msgcontent" style="overflow:auto !important;display: none">
                                    <div class="m40v2-status-message m40v2-status-message--success icon icon-new-success-message hidden msgcontent" id="message" data-component="m40v2-status-message">
                                        <div class="m40v2-status-message__title" id="message-text" data-errormsg="@Translate.Text("Rammas Error")" data-successmsg="@Translate.Text("Rammas Success Message")"></div>
                                    </div>
                                </div>
                                <form action="POST" class="form rammasExportChat" data-parsley-focus="true" data-form="true">
                                    @Html.AntiForgeryToken()
                                    <div class="m39-modal__content" style="overflow:auto !important">
                                        <div class="m55a-rammas--disclaimer_content m55a-rammas--disclaimer_contentactive">


                                            <fieldset class="fieldset">

                                                <div class="form-field form-field--text ">
                                                    <label for="form-field-EmailAddress" class="form-field__label">
                                                        @Translate.Text("Rammas Email Label")
                                                    </label>
                                                    <span class="form-field__input-wrapper">
                                                        @Html.TextBoxFor(x => x.EmailAddress,
                            new
                            {
                                @class = "form-field__input form-field__input--text",
                                @id = "form-field-EmailAddress",
                                @placeholder = @Translate.Text("Rammas Email Placeholder"),
                                @aria_required = "true",
                                @required = "required",
                                @data_parsley_error_message = Translate.Text("Rammas Enter Valid Email Address"),
                                @data_parsley_required_message=Translate.Text("Rammas Field Required"),
                                @data_parsley_errors_container = "#description-for-EmailAddress",
                                @aria_describedby = "description-for-EmailAddress",
                                @type = "email",
                                @autocomplete = "off"
                            })

                                                    </span>
                                                    <div id="description-for-EmailAddress" class="form-field__messages">
                                                        @Html.ValidationMessageFor(x => x.EmailAddress, "", new { @class = "parsley-errors-list" })
                                                    </div>
                                                </div>

                                                <div class="form-field form-field--text ">
                                                    <label for="form-field-Subject" class="form-field__label">
                                                        @Translate.Text("Rammas Email Subject")
                                                    </label>
                                                    <span class="form-field__input-wrapper">
                                                        @Html.TextBoxFor(x => x.Subject,
                            new
                            {
                                @class = "form-field__input form-field__input--text",
                                @id = "form-field-Subject",
                                @placeholder = @Translate.Text("Rammas Email Subject Placeholder"),
                                @aria_required = "true",
                                @required = "required",
                                @data_parsley_maxlength = "100",
                                @maxlength = "100",
                                @data_parsley_required_message = Translate.Text("Rammas Field Required"),
                                @data_parsley_error_message = Translate.Text("Rammas Subject Validation Error Message"),
                                @data_parsley_errors_container = "#description-for-Subject",
                                @aria_describedby = "description-for-Subject"
                            })

                                                    </span>
                                                    <div id="description-for-Subject" class="form-field__messages">
                                                        @Html.ValidationMessageFor(x => x.Subject, "", new { @class = "parsley-errors-list" })
                                                    </div>
                                                </div>

                                                @Html.TextAreaFor(x => x.Chat, new { @class = "hidden m55a-rammas--share-html_container", id = "form-field-Chat" })


                                            </fieldset>

                                            <div class="m55a-rammas--shareModal_clone">

                                            </div>

                                            <div id="description-for-recaptcha" class="form-field__messages form-field__messages-recaptcha centered"><ul class="parsley-errors-list filled" id="parsley-id-6"><li class="parsley-custom-error-message">@Translate.Text("Rammas Captcha Error")</li></ul></div>

                                            <div class="recaptcha_check" data-checked="false"></div>
                                            <div class="g-recaptcha" @*data-callback="recaptchaCallback"*@ data-sitekey="@ReCaptchaHelper.RecaptchaSiteKey()"></div>
                                        </div>
                                        <div class="m55a-rammas--disclaimer_content">
                                            <div class="m14-richtext">
                                                <h4>@Translate.Text("Rammas Disclaimer Header")</h4>
                                            </div>
                                            <div class="m55a-rammas--disclaimer_text" style="margin-top:8px;">
                                                @Html.Raw(Translate.Text("Rammas Disclaimer Text"))

                                            </div>
                                            <div class="form-field form-field--toggles mt24">
                                                <div class="form-field__checkbox">
                                                    <label>
                                                        <input class="form-field__input form-field__input--checkbox" id="form-field-checkbox_1_1" aria-label="form-field-checkbox_1_1" name="checkbox_1_1" type="checkbox" value="1" aria-describedby="description-for-d6fapsvnv" data-parsley-errors-container="#description-for-d6fapsvnv" data-parsley-multiple="checkbox_1_1" data-parsley-id="45" required="" data-parsley-error-message="@Translate.Text("Rammas Agree Validation Error Message")">
                                                        <span class="form-field__fakecheckbox focus-enabled">
                                                            <strong>
                                                                @Html.Raw(Translate.Text("Rammas Agreement Text"))
                                                            </strong>
                                                        </span>
                                                    </label>
                                                </div>
                                                <div id="description-for-d6fapsvnv" class="form-field__messages">
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="m39-modal__footer">
                                        <div class="button button--primary button--next m55a-rammas--disclaimer_next">
                                            @Translate.Text("Next")
                                        </div>
                                        <button class="button button--primary hidden" type="submit" id="ExportSubmit" data-modal-confirm="true" data-submission-text="@Translate.Text("Rammas Sending Chat")...">@Translate.Text("Rammas Send Chat")</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <div class="m39-modal__overlay"> </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
    <div class="m55a-rammas--input-bg hidden" id="step2b">
        <div class="m55a-rammas--controls">
         
        </div>
        <div class="m55a-rammas--input-bg--wrapper"></div>
    </div>

    <div class="rammas_disclaimer hidden">
        <h3>@Html.Raw(Translate.Text("Rammas Disclaimer Header"))</h3>
        @Html.Raw(Translate.Text("Rammas Disclaimer Text"))
    </div>
    <div id="fake_div" style="display:none"></div>
</div>
<div class="audio">
    <audio hidden="hidden" id="rammasAudio" onended="PlayNext()" muted=""></audio>
</div>
<style type="text/css">
    .g-recaptcha div {
        margin: auto;
        padding-top: 15px;
    }

    @@media all and (-ms-high-contrast: none) {
        .m55a-rammas--mute:before {
            position: static;
        }

        .m55a-rammas--mute {
            margin-top: -5px;
        }
    }

    @@supports (-ms-ime-align:auto) {
        .m55a-rammas--mute:before {
            position: static;
        }

        .m55a-rammas--mute {
            margin-top: -5px;
        }
    }

    .chattimeelapsed {
        margin-top: -15px;
        font-family: Calibri;
        font-weight: 100;
        color: #cacaca;
        font-size: smaller;
    }

    .right {
        padding-right: 45px;
        text-align: right;
    }

    .left {
        padding-left: 45px;
        text-align: left;
    }
</style>



<script type="text/javascript" src="~/Scripts/nml/form-submit-validate.js"></script>
<script type="text/javascript">
   String.prototype.format = function() {
    var a = arguments;
    return this.replace(/{(\d+)}/g, function(e, t) {
        return void 0 !== a[t] ? a[t] : e;
    });
};
    var form = ".rammasExportChat";
    var root_id = "#modal_true";
    var typingdiv = ".m55a-agent-typing";
    var waitingdiv = ".m55a-rammas--loading";
    function recaptchaCallback() {
        jQuery("#description-for-recaptcha").hide();
        if (grecaptcha && grecaptcha.getResponse().length == 0) {
            jQuery("#description-for-recaptcha").show();
            jQuery(".recaptcha_check").attr("data-checked", "false");
            return false;
        } else {
            jQuery(".recaptcha_check").attr("data-checked", "true");
            return true;
        }

    };

    var dv_inner = "#bot_chat";
    var url = '@Url.Action("PostMessage","RammasDirectLine")'
    var last_message = { msg: "", __RequestVerificationToken: GetAFToken() };
    var idx = 0, isUserLoggedIn=@Html.Raw(User.Identity.IsAuthenticated ? "true" : "false");
    var a = { msg: "", __RequestVerificationToken: GetAFToken() };
    var myModel = {
        socketUrl: '@Html.Raw(RammasAvayaClientModel.chatHost)', convId: '@Model.RequestId', estimateWaitTimeUrl: '@RammasAvayaClientModel.estimatedWaitTimeUrl', activity: {
            type: "message", from: { id: "" }, channelData: { channelType: "Web-Directline" }, text: ""
        },isServerError:@Html.Raw((Model.IsServerError ? "true" : "false").ToString()),firstName:"",lastName:"",email:"",phone:""
    };
    //{"type":"message","from":{"id":"637405314495811484"},"channelData":{"channelType":"Web-Directline"}, "text":""}
    var is_startup = true;
      
    var socket = null, socketOpen = false;

    jQuery(document).ready(function () {

        //if (socketOpen === false) { InitiateSocket(); }
        jQuery("#chat_form").submit(function (e) {
            e.preventDefault();
            myModel.firstName = jQuery("#txFN").val().trim();
            myModel.lastName = jQuery("#txLN").val().trim();
            myModel.email = jQuery("#txEmail").val().trim();
            myModel.phone = jQuery("#MobileNumber").val().trim();
            UserInfoSubmit();
        });
             
        $('input[id="cid"]').on('input', function () { $(this).val($(this).val().replace(/[<>]/gi, '')); });
        $("#cid").on("keydown", function (e) {
            if (13 == e.which) {
                a.msg = $("#cid").val().trim();
                if (a.msg) {
                    $("#cid").val("");
                    SendMessage(a.msg);
                }
                $("#cid").val("");
            } else {
                MO.isTypingMessage();
            }
        });

        $("#btSend").click(function (e) {
            e.preventDefault();
            a.msg = $("#cid").val().trim();
            if (a.msg) {
               SendMessage(a.msg);
            }
            $("#cid").val("");
        });

        if (isUserLoggedIn === true) {
            var nameArr = '@Model.UserProfile.FullName'.split(' ');
            myModel.firstName = nameArr[0];

            if (nameArr.length > 1) { myModel.lastName = nameArr[1]; }

            myModel.email = '@Model.UserProfile.EmailAddress';
            myModel.phone = '@Model.UserProfile.MobileNumber';
            UserInfoSubmit();
        }

    });
    var btMute = ".m55a-rammas--mute";
    var rmAudio = "#rammasAudio";
    var audioFiles = [];
    idx = 0;
    var showLogin = false, agentTyping=false;
    var focusDiv = ".dewa-bot-message-groups";
    var messageProcessing = false;

function UserInfoSubmit() { 

    if (myModel.firstName.length <= 0 || myModel.email.length <= 0 || myModel.phone.length <= 0) {
        console.log("form is in invalid state");
        return;
    }
    //jQuery("#step1a").hide();
    jQuery("#step1b").hide();
    jQuery("#step2a").removeClass("hidden");
    jQuery("#step2b").removeClass("hidden");
    MO.getEstimatedWaitTime();
    //jQuery("#modal_info_capture").find(".btclose").trigger("click");
}

function InitiateSocket() {
    if (myModel.isServerError) { console.log("Server Error, breaking further process.."); return; }

    if (!myModel.socketUrl) { console.log("Socket Url is null."); return; }

    socket = new WebSocket(myModel.socketUrl);

    socket.onopen = function (e) {
        WriteCon("Connection established");
                //WriteCon("Sending to server");
        socketOpen = true;
        MO.initChat(socket);
        MO.lastAction = 1;
    };

    socket.onmessage = function (e) { MO.onMessage(e.data); };
    socket.onclose = function (e) {
        if (e.wasClean) {
            WriteCon(JSON.stringify(e.data));
        }
        else {
            WriteCon('Connection died');
        }
        RenderTextOnly("Chat is ended!");
        jQuery("#cid").prop("disabled", true);
    };
    socket.onerror = function (error) {
        WriteCon(JSON.stringify(error));
    };
}


function SendMessage(d) {
    if (!navigator.onLine) { alert('You are offline!'); return false; };

    if (d && d.length>0) {
        var m = formatMyText(d);
        jQuery(dv_inner).append(m);
        MO.userMessage(d, socket);
        SetFocus();
        //AppendMessageDateTime(false, moment().locale("en-ae").format());
    }
}

function ToggleTyping(v) {
        if (v === true) {
            jQuery(dv_inner).append(jQuery(typingdiv).clone().removeClass("hide"));
            jQuery(focusDiv).animate({ scrollTop: jQuery(focusDiv)[0].scrollHeight }, 800);
            agentTyping = true;
        }
        else {
            jQuery(typingdiv).last().remove(); agentTyping = false;
        }
    }

function checkForValue(json, value) {
  for (key in json) {
            if (typeof (json[key]) === "object") {
                return checkForValue(json[key], value);
            } else if (json[key] === value) {
                return true;
            }
        }
   return false;
}

function WriteCon(text) {
    console.log(text); return true;
    }

function RenderSurveyS2(a) {
    var n = '<div class="dewa-bot-message-wrapper dewa-bot-survey"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content"><div class="format-markdown">{7}<h3 class="dewa-bot-message-content_title">{0}</h3></div><div class="dewa-bot-teaser_content-details"><div class="dewa-bot-survey_checkbox"><fieldset class="fieldset surveyfb" id="surveyfb"><legend class="form-field__label">{1}</legend>{2}</fieldset></div></div><div class="dewa-bot-list"><div class="dewa-bot-card dewa-bot-adaptive-card hero"><div class="ac-container"><div class="clear-height"></div><div class="buttons-container"><button type="button" class="ac-pushButton btest">{3}</button></div><div class="buttons-container"><button type="button" class="ac-pushButton btn" data-type="sr2" id="btsr2">{4}</button></div></div></div></div><div class="form-field form-field--text form-field--textarea hide txcom" id="txcom"><label  class="form-field__label">{5}</label><span class="form-field__input-wrapper"><textarea class="form-field__input form-field__input--text form-field__input--textarea ta_feedback" maxlength="500" name="textarea" id="ta_feedback" type="textarea" placeholder="{6}" ></textarea></span></div></div>';

     var li = ' <div class="form-field__checkbox"><label><input class="form-field__input form-field__input--checkbox" id="form-field-checkbox_{0}" name="checkbox_{0}" type="checkbox" value="{0}"><span class="form-field__fakecheckbox focus-enabled">{1}</span></label></div>';

    var d = ""; var p = "";
    if (a.Text) { p = "<p>" + a.Text + "</p>"; };

   if (a.Attachments && 0 < a.Attachments.length) {
            $.each(a.Attachments, function (e, tt) {
                var s = a.Attachments[e];
                switch (s.ContentType) {
                    case 5:
                        $.each(s.Content.surveyStage2, function (e, t) {
                            $.each(t.items, function (i, v) {
                                d += li.format(v.value, v.title)
                            });
                            d = n.format(t.text1, t.text2, d, t.sectionLabel, t.buttonLabel, t.textBoxLabel, t.textBoxPH, p);
                        });
                        break;
                    case 3:
                        s.Content.media && $.each(s.Content.media, function (e, t) {
                            audioFiles.push(t.url);
                        });
                        break;
                    default:
                        console.log("unknown value returned: " + s.ContentType);
                }

            });
    }

    d += '</div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest</span></div></div>';
    $(dv_inner).append(d);
}

function RenderSurveyS1(a) {
    var n = '<div class="dewa-bot-message-wrapper dewa-bot-survey"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content"><div class="format-markdown"><h3 class="dewa-bot-message-content_title">{0}</h3></div><div class="dewa-bot-teaser_content-details"><div class="dewa-bot-survey_img"><div class="survey_img neutral_happy btn" data-type="sr1" data-value=\'{1}\'><img class="btn" src="{2}"><span class="survey_img_text">{3}</span></div><div class="survey_img neutral_sad btn" data-type="sr1" data-value=\'{4}\'><img class="btn" src="{5}"><span class="survey_img_text">{6}</span></div><div class="survey_img survey_sad btn" data-type="sr1" data-value=\'{7}\'><img class="btn" src="{8}"><span class="survey_img_text">{9}</span></div></div></div></div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest</span></div></div>';

    var d = "";
    if (a.Text) { RenderTextOnly(a.Text) };
    if (a.Attachments && 0 < a.Attachments.length) {
            $.each(a.Attachments, function (e, t) {
                var s = a.Attachments[e];
                switch (s.ContentType) {
                    case 5:
                        $.each(s.Content.surveyStage1, function (e, t) {
                            d += n.format(t.text, t.happyValue, t.happyImageUrl, t.happyTitle, t.neutralValue, t.neutralImageUrl, t.neutralTitle, t.sadValue, t.sadImageUrl, t.sadTitle);
                        });
                        break;
                    case 3:
                        s.Content.media && $.each(s.Content.media, function (e, t) {
                            audioFiles.push(t.url);
                        });
                        break;
                    default:
                        console.log("unknown value returned: " + s.ContentType);
                }
            });
    }

    $(dv_inner).append(d);
}

function RenderStoreDetails(a) {
    var n = '<div class="dewa-bot-message-wrapper dewa-bot-slider-detail"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content"><div class="dewa-bot-teaser_content-details">';

    var si = ' <div class="format-markdown"><h3 class="dewa-bot-teaser_title">{1}</h3><p>{2}</p></div><div class="dewa-bot-teaser_content-details"><div class="dewa-bot-teaser_img"><img src="{0}"></div><div class="dewa-bot-teaser_text"><h3 class="dewa-bot-teaser_text_title">{3}</h3><p>{4}</p><h3 class="dewa-bot-teaser_text_title">{5}</h3><p>{6}</p><h3 class="dewa-bot-teaser_text_title">{7}</h3><p>{8}</p></div></div>';
    var d = "";
    if (a.Text) { RenderTextOnly(a.Text) }; var rec_found = false;

    if (a.Attachments && 0 < a.Attachments.length) {
        $.each(a.Attachments, function (e, t) {
            var s = a.Attachments[e];
            switch (s.Content.text && (n += m.format(s.Content.text)), s.ContentType) {
                case 5:
                    $.each(s.Content.itemdetail, function (e, t) {
                            rec_found = true;
                            d += si.format(t.url,t.title1, prettifyText(t.body1), t.title2, prettifyText(t.body2), t.title3, prettifyText(t.body3), t.title4, prettifyText(t.body4));
                    });

                    break;
                case 3:
                    s.Content.media && $.each(s.Content.media, function (e, t) {
                        //console.log(t.url);
                        audioFiles.push(t.url);
                    });
                    break;
            }
        });
    }

    n += d + '</div></div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest</span></div></div>';
    if (rec_found) { $(dv_inner).append(n); }

    }

function RenderStoreCarosel(a) {
        var n = '<div class="dewa-bot-message-wrapper dewa-bot-slider"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content"><div class="dewa-bot-slider-wrapper">';
        var m = '<div class="format-markdown"><p>{0}</p></div>';
    var si = '<div class="dewa-bot-slider-item"><div class="dewa-bot-list-slide"><div class="format-markdown"><h3 class="dewa-bot-teaser_title">{0}</h3>{1}</div><div class="dewa-bot-teaser_content"><div class="dewa-bot-teaser_text">{2}</div><div class="dewa-bot-teaser_thumb"><img src="{3}"></div></div><div class="dewa-bot-list-slide"><div class="dewa-bot-card dewa-bot-adaptive-card hero"><div class="ac-container"><div class="clear-height"></div><div class="buttons-container"><button type="button" class="ac-pushButton btn" data-type="detail" data-value=\'{4}\'>{5}</button></div></div></div></div></div></div>';
    var ni = '<button type="button" class="ac-pushButton btn" data-type="ni" data-value=\'{0}\'>{1}</button>';
    var af = '<img src="{0}" class="btn" data-type="af" data-value=\'{1}\'>';

    var sm = '<div class="dewa-bot-message-dir-button"><div class="buttons-container"><button type="button" class="ac-pushButton btn" data-type="showmore" data-value=\'{0}\'>{1}</button></div></div>';
    var d = ""; var rec_found = false, showmore=false;
    if (a.Text && 0 < a.Text.length) {
        if (a.Text.indexOf("**") >= 0) {
            a.Text = '<strong>' + a.Text.split("**").join("") + "</strong>";
        }
       RenderTextOnly(a.Text);
    }

        if (a.Attachments && 0 < a.Attachments.length) {

            $.each(a.Attachments, function (e, t) {
                var s = a.Attachments[e];
                switch (s.Content.text && (n += m.format(s.Content.text)), s.ContentType) {
                    case 5:
                        $.each(s.Content.storeitems, function (e, t) {
                            var sni = ''; var saf = ''; rec_found = true;
                            if (t.showMore) {
                                sm = sm.format(t.detail, t.title); showmore = true;
                            } else {
                                //if (t.showNI) { sni = ni.format(t.id+'_'+t.NIValue+'_'+t.category,t.NITitle); }
                                if (t.showAF) { saf = af.format(t.AFImageUrl, t.id + "_" + t.AFValue + '_' + t.category); }
                                d += si.format(t.title, saf, t.detail, t.url, t.id + '_' + t.VDValue + '_' + t.category,t.VDTitle);
                            }
                        });
                        break;
                    case 3:
                        s.Content.media && $.each(s.Content.media, function (e, t) {
                            //console.log(t.url);
                            audioFiles.push(t.url);
                        });
                        break;

                    default:
                        console.log("unknown value returned: " + s.ContentType);
                }
            });
    }

    if (rec_found) {
        n += d + '</div>';
        if (showmore) { n += sm;  }
        n += '</div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest</span></div></div>';
        $(dv_inner).append(n);

    }
}

function RenderAdaptiveList(a) {
        var n = '<div class="dewa-bot-message-wrapper list"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content">';
        var o = '<div class="format-markdown"><p>{0}</p></div>';
    var i = '<div class="dewa-bot-card dewa-bot-adaptive-card hero"><div class="ac-container"><div class="clear-height"></div><div class="buttons-container"><button type="button" class="ac-pushButton btn" data-type="{1}" data-value=\'{2}\'>{0}</button></div></div></div>';

    var i1a = '<div class="dewa-bot-keys">{0}</div>';
    var i1b = '<div class="dewa-bot-keys-row"><p><strong class="dewa-bot-keys-label">{0}</strong></p><p><span>{1}<span></span></span></span></p></div>';
    var i2 = '<div class="dewa-bot-form"><div class="dewa-bot-form-field"><label>{0}</label><input class="form-control txt_amount" id="txt_amount" type="number" value="{3}" data-val=\'{1}\' placeholder="{2}" onkeypress="return EasyPayAmountKeypress(this.id);" min="0.01" max="999999.99"></div></div>';
    var i3 = '<div class="dewa-bot-list">{0}</div>';

    var r = false; var c = false; var d = ""; var submitFound = false;

        if (a.Text && 0 < a.Text.length) {
            if (a.Text.indexOf("**") >= 0) {
                a.Text = '<strong>' + a.Text.split("**").join("") + "</strong>";
                a.Text = prettifyText(a.Text);
            }
            n += o.format(a.Text); r = true;
        }

        if (a.Attachments && 0 < a.Attachments.length) {

            $.each(a.Attachments, function (e, t) {
                var s = a.Attachments[e];

                switch (s.Content.text && (n += o.format(s.Content.text), r = true), s.ContentType) {
                    case 1:
                    case 0:
                        s.Content.buttons && (c = true, $.each(s.Content.buttons, function (e, t) {
                            var a = s.Content.buttons[e];
                            switch (a.type) {
                                case "TextBlock":
                                    if (a.value === "-") {
                                        d += o.format(a.title);
                                    } else {
                                        d += i1b.format(a.title.replace(/\*\*/g,""), a.value);
                                    }
                                    if (a.last===true) { d = i1a.format(d); }
                                    break;
                                case "Input.Text":
                                    d = i1a.format(d);
                                    var isPosVal = parseFloat(a.value);
                                    if (isPosVal > 0) { d += i2.format(a.title, escape(a.value), a.ph, a.value); }
                                    else { d += i2.format(a.title, escape(a.value), a.ph, ""); }
                                    if (a.last) { d += i1a.format(d); }
                                    break;
                                case "imBack":
                                    d += i.format(a.title, "bt",escape(a.value));
                                    break;
                                case "Action.Submit":
                                    submitFound = true;
                                    var ab = i.format(a.title, "sb", escape(a.value));
                                    d+=i3.format(ab);
                                    break;
                                default:
                                    d += i.format(a.title, "ln", a.value);

                                    break;
                            }

                        }));
                        break;
                    case 4:
                    case 2:
                        s.Content.buttons && (c = true, $.each(s.Content.buttons, function (e, t) {
                            c = true;
                            var a = s.Content.buttons[e];
                            if (a.type === "imBack") { d += i.format(a.title, "bt", escape(a.value)); }
                            else {
                                d += i.format(a.title, "ln", escape(a.value));
                            }

                        }));
                        break;

                    case 3:
                        s.Content.media && $.each(s.Content.media, function (e, t) {
                            //console.log(t.url);
                            audioFiles.push(t.url);
                        });
                        break;

                    default:
                        console.log("unknown value returned: " + s.ContentType);
                }
            });
    }

    if (c) {
        if (submitFound) {
            n += '<div class="dewa-bot-list">{0}</div>'.format(d);}
        else {
            n += d;
        }

    }
    n += '</div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest1</span></div></div>';

    if (!c && !r) return ;

    $(dv_inner).append(n);
    }

function RenderStoreOffersList(a) {
    var n = '<div class="dewa-bot-message-wrapper list"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content">';
    var o = '<div class="format-markdown"><p>{0}</p></div>';
    var i = '<div class="dewa-bot-card dewa-bot-adaptive-card hero"><div class="clear-height"></div><div class="buttons-container"><button type="button" class="ac-pushButton btn" data-type="{1}" data-value=\'{2}\'>{0}</button></div></div>';

    if (a.Text && 0 < a.Text.length) {
        if (a.Text.indexOf("**") >= 0) {
            a.Text = '<strong>' + a.Text.split("**").join("") + "</strong>";
        }
        n += o.format(a.Text);

    }
var rec_found = false;

 if (a.Attachments && 0 < a.Attachments.length) {
     var d = "";

     $.each(a.Attachments, function (e, t) {
         var s = a.Attachments[e];
         switch (s.ContentType) {
             case 0:
             case 2:
                 s.Content.buttons && (c = !0, $.each(s.Content.buttons, function (e, t) {
                            rec_found = true;
                            var a = s.Content.buttons[e];
                            if (a.type === "imBack") { d += i.format(a.title, "bt", escape(a.value)); }
                            else {
                                d += i.format(a.title, "ln", a.value);
                            }

                 }));

                 break;

             case 3:
                 s.Content.media && $.each(s.Content.media, function (e, t) {
                     audioFiles.push(t.url);
                 });

                 break;
             default:
                 console.log("unknown value returned: " + s.ContentType);
         }
     });
    }

    var ls = '<div class="dewa-bot-list">{0}</div>';

    n += ls.format(d) + '</div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest1</span></div></div>';
    if (rec_found) {
        $(dv_inner).append(n);
    }
}

function RenderList(a) {
    var n = '<div class="dewa-bot-message-wrapper list"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content">';
    var bl = '<div class="dewa-bot-list"><div class="dewa-bot-card dewa-bot-adaptive-card hero"><div class="ac-container">';
    var bl1 = '</div></div></div>';
    var i = '<div class="buttons-container"><button type="button" class="ac-pushButton btn" data-type="{1}" data-value=\'{2}\'>{0}</button></div>';
    var n1='</div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest</span></div></div>';
    var m = '<div class="format-markdown">{0}</div>';
    var m1 = '';
    if (a.Text && 0 < a.Text.length) {
        if (a.Text.indexOf("**") >= 0) {
            var tx = a.Text.replace("**", "<strong>");
            tx = tx.replace("**", "</strong>");

            a.Text = tx;
        }
        //RenderTextOnly(a.Text);
        m1 = '<p>' + prettifyText(a.Text)+ '</p>';
    } //else { n=n.format("");}
    var rec_found = false; var d = "";
    if (a.Attachments && 0 < a.Attachments.length) {

        $.each(a.Attachments, function(e, t) {
            var s = a.Attachments[e];
            if (s.Content.text) {
               s.Content.text= s.Content.text.replace("**", "<strong>").replace("**", "</strong>");
                m1 += '<br/><p>' + prettifyText(s.Content.text) + '</p>';
            }
            switch (s.ContentType) {
                case 2:
                case 0:
                    s.Content.buttons && (rec_found = true) && ($.each(s.Content.buttons, function(e, t) {
                    var a = s.Content.buttons[e];
                    "imBack" === a.type ? d += i.format(a.title, "bt", escape(a.value)) : d += i.format(a.title, "ln", a.value);
                }));
                break;

             case 3:
                    s.Content.media && $.each(s.Content.media, function (e, t) {
                        //console.log(t.url);
                        audioFiles.push(t.url);
                    });
              break;

              default:
                console.log("unknown value returned: " + s.ContentType);
            }
        });
    }
    if (m1) { n += m.format(m1); }
    //else { n = n.format("");}

    if (rec_found) {
        n = n + bl + d + bl1 + n1;
        $(dv_inner).append(n);
    } else if (m1) {
        n = n + n1;
        $(dv_inner).append(n);
    }
}

function RenderCarousel(a) {
    var n = '<div class="dewa-bot-message-wrapper carousel"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content"><div class="dewa-bot-carousel"><div class="dewa-bot-hscroll-outer"><div class="dewa-bot-hscroll" style="margin-bottom: 0px;"><ul>';
    var i = '<li class="dewa-bot-carousel-item"><div class="dewa-bot-card dewa-bot-adaptive-card hero"><div class="ac-container"><div class="clear-height"></div><div class="buttons-container"><button type="button" class="ac-pushButton btn" data-type="{1}" data-value=\'{2}\'>{0}</button></div></div></div></li>';
    var n1 = '</ul></div></div></div></div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest</span></div></div>';

    if (a.Text && 0 < a.Text.length) {
        if (a.Text.indexOf("**") >= 0) {
            a.Text = '<strong>' + a.Text.split("**").join("") + "</strong>";
            a.Text = prettifyText(a.Text);
        }
        RenderTextOnly(a.Text);
    }
    var rec_found = false;
    if (a.Attachments && 0 < a.Attachments.length) {
        var d = "";
        $.each(a.Attachments, function (e, t) {
            var s = a.Attachments[e];
            if (s.Content.text) { RenderTextOnly(s.Content.text); }
            switch (s.ContentType) {
                case 0:
                case 1:
                case 2:
                    s.Content.buttons &&(rec_found=true) &&  (c = !0, $.each(s.Content.buttons, function (e, t) {
                        var a = s.Content.buttons[e];
                        "imBack" === a.type ? d += i.format(a.title, "bt", escape(a.value)) : d += i.format(a.title, "ln", a.value);
                    }));
                    break;
                case 3:
                    s.Content.media && $.each(s.Content.media, function (e, t) {
                        audioFiles.push(t.url);
                    });
                    break;
                default:
                    console.log("unknown value returned: " + s.ContentType);
                }
        });
    }
    n = n + d + n1;
    if(rec_found) $(dv_inner).append(n);
}

function RenderTextOnly(txt)
{
    //txt = prettifyText(txt);
    var n = '<div class="dewa-bot-message-wrapper list"><div class="dewa-bot-message dewa-bot-message-from-bot"><div class="dewa-bot-message-content"><div class="format-markdown"><p>{0}</p></div></div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest1</span></div></div>'.format(txt);
    $(dv_inner).append(n);
}

function formatMyText(e)
{
    if (e && e.length > 0) { return '<div class="dewa-bot-message-wrapper list"><div class="dewa-bot-message dewa-bot-message-from-me"><div class="dewa-bot-message-content"><span class="format-plain"><span>' + e + '</span></span></div></div><div class="dewa-bot-message-from dewa-bot-message-from-bot"><span>RammasBotTest</span></div></div>'; }
}

function GetAFToken() {
    return jQuery('input[name="__RequestVerificationToken"]').val();
}

function SetFocus() {
    setTimeout(function () { jQuery(focusDiv).animate({ scrollTop: jQuery(focusDiv)[0].scrollHeight }, 1200); }, 500);
    }

var MO = {
    lastAction: 0, socketOpen: false, lastMessageTime: new Date(), intrvl: null, isChatAvailable: true,userTyping:false,userTypingSent:false,
        root: {
            authToken: "", apiVersion: "1.0", type: "request", "body": {method:"",workRequestId:'@Model.RequestId'} },
    initChat: function (soket) {
            var copy = JSON.parse(JSON.stringify(this.root));
            copy.body = {
                "DeviceType": navigator.userAgent,
                "intrinsics": {
                    'channelAttribute': 'Chat',
                    'textDirection': document.dir.toUpperCase(),
                    'attributes': ["ServiceType.DewaChat", "Language.English"],
                    'email': myModel.email,
                    'name': myModel.firstName,
                    'lastName': myModel.lastName,
                    'country': '',
                    'area': '',
                    'phoneNumber': myModel.phone,
                    'topic': '',
                    'customFields': []
                },
                "method": "requestChat",
                "priority": 5,
                "requestTranscript": false,
                "routePointIdentifier": "Default",
                "workFlowType": "", "customData": {}, "calledParty":window.location.href
            };
            copy.body["workRequestId"] = this.root.body.workRequestId;
            copy.type = "request";
        soket.send(JSON.stringify(copy));
        this.lastMessageTime = new Date();
        },
    onMessage: function (e) {
            console.log(e);
            var j = JSON.parse(e);
            switch (this.lastAction) {
                case 0:
                    WriteCon(e);
                    break;
                case 1:
                    var key = "authenticationKey";
                    this.root.authToken = j.body !== 'undefined' && j.body.hasOwnProperty(key) ? j.body.authenticationKey : '';
                    //console.log(ak);
                    if (this.root.authToken.length > 0) {
                   this.userMessage("Hello", socket);
                        this.lastAction = 2;
                    }
                    break;
                case 2:
                    switch (j.type) {
                        case "acknowledgement":
                            //message received by backend;
                            //this.intrvl = window.setInterval(this.pingMessage, 1000 * 10);
                            break;
                        case "notification":
                            this.processNotification(j.body);
                            break;
                        default:
                            console.log(JSON.stringify(j));
                            break;
                    }

                    break;
                default:
                    this.processNotification(j.body);
                    console.log(JSON.stringify(e));
                    break;
            }
    },
    userMessage: function (msg, soket) {
        var copy = JSON.parse(JSON.stringify(this.root));
            copy.body.method = "newMessage";
            copy.body["message"] = msg;
            copy.body["type"] = "text";
        soket.send(JSON.stringify(copy));
        this.lastMessageTime = new Date();
        this.userTyping = false; this.userTypingSent = false;
    },
    agentMessage: function (o) {
        RenderTextOnly(o.message);
        SetFocus();
    },
    pingMessage: function () {
        socket.send('{"authToken": "","apiVersion": "1.0","type": "request","body": {"method": "ping"}}');
        /*var now = new Date();
        var dif = (now - this.lastMessageTime) / 1000;
        if (dif > 10) {

            //this.lastMessageTime = now;
        }*/
    },
    isTypingMessage: function () {
        if (this.userTypingSent === false) {
            socket.send('{"authToken":"","apiVersion":"1.0","type":"request","body":{"method":"isTyping","isTyping":true}}');
            this.userTypingSent = true;
            this.lastMessageTime = new Date();
        }
    },
    processNotification: function (j) {
        switch (j.method) {
            case "isTyping":
                if (agentTyping === false)
                    ToggleTyping(true);
                console.log('Agen is typing....');

                break;
            case "newMessage":
                if (agentTyping === true)
                    ToggleTyping(false);
                if (j.message && j.message.length > 0) { this.agentMessage(j); }
                break;
            case "participantLeave":
                if (j.displayName && j.displayName.length > 0) {
                    this.agentMessage({ message:j.displayName+ " left the Chat." });
                }
                //socket.close();

                break;
            case "newParticipant":
                this.agentMessage({ message: "An agent has joined the conversation" });
               this.lastAction = 3;//welcome message from agent/participant
                break;
            case "pong":
                this.pingMessage();
                break;

            default:
                console.log(JSON.stringify(j));
                break;
        }

    },
    getEstimatedWaitTime: function () {
        var settings = {
            "url": myModel.estimateWaitTimeUrl,
            "method": "POST",
            "timeout": 0,
            "headers": {
                "Content-Type": "application/json"
            },
            "data": JSON.stringify({ "serviceMap": { "1": { "attributes": { "Channel": ["Chat"], "Location": ["Inhouse"] }, "priority": 5 } } }),
        };
        var err = 'EWT: empty response! This may be caused by CORS issues or by blocking JavaScript (e.g. NoScript)';

        jQuery.ajax(settings).done(function (response) {
            console.log(response);
            // if the response is empty, log an error.
            if (response === err) {
                console.error();
                return;
            }

            // use only the first for now. Replace this with the ID you
            // wish to use
            var mapId = '1';
            var json = JSON.parse(JSON.stringify(response));
           MO.processEstimatedWaitTime(json.serviceMetricsResponseMap[mapId]);

            setTimeout(function () { if(MO.isChatAvailable===true) InitiateSocket(); }, 1000);

        }).fail(function (response) {

            if (response === '') {
                console
                    .error(err + '. Response code: ' + this.status);
            } else {
                console.error('EWT: ' + response);
            }

           MO.alertMessage('The chat is not currently available. Please try again later');

            //show chat is not available message
            //disable chat controls
        });
    },
    processEstimatedWaitTime: function (serviceMap) {
        // maximum wait time in seconds, and various status messages.
        var maxWaitTime = 600,
            chatAvailableMsg = 'The chat is available. Your estimated wait time is {0} minutes.',
            chatPossibleMsg = 'The chat is available. An agent will be with you shortly.',
            chatNotAvailableMsg = 'The chat is not currently available. Please try again later',
            noAgentsAvailableMsg = 'No agents are currently available. Please try again later';

        // refactoring for test purposes. In production, these can be left unchanged.
        var minAgentCount = 1;
        var minWaitTime = 0;

        // This is the default priority. It ranges from 1 (max) to 10 (min)
        var priority = 5;

        // by default, only use one service map.
        var services = {
            "1": {}
        };

        var alertMsg = chatPossibleMsg;
        var chatAvailable = true;
        var metrics = serviceMap.metrics;
        if (metrics !== undefined) {
            var waitTime = parseInt(metrics.EWT);
            var agentCount = parseInt(metrics.ResourceStaffedCount);
            console.debug('EWT: wait time is ' + waitTime + '. Maximum wait time is ' + maxWaitTime);
            console.debug('EWT: ' + agentCount + ' agents are logged in. Minimum allowed are ' + minAgentCount);

            // if waitTime is less than the maximum and agents are logged in, chat is available. Otherwise, it isn't
            // FYI: if agents are logged in, that doesn't necessarily mean they *can* take a call. They may be busy, or on a break.
            if (waitTime < maxWaitTime && waitTime >= minWaitTime && agentCount >= minAgentCount) {
                var waitTimeInMins = Math.round(waitTime / 60);
                alertMsg = chatAvailableMsg.replace('{0}', waitTimeInMins);
                chatAvailable = true;
                //chatUI.showChatPanel();
                //chatUI.addEwtToChatTab(waitTimeInMins);
            } else {
                chatAvailable = false;
                if (waitTime > maxWaitTime) {
                    // customise alert messages depending on the circumstances.
                    alertMsg = chatNotAvailableMsg;
                } else {
                    alertMsg = noAgentsAvailableMsg;
                }
            }
        }

        if (!chatAvailable) {
         this.isChatAvailable=false;
        }

        // leave this in for ease of testing
       this.alertMessage(alertMsg);

    },
    alertMessage: function (mst) {
        //alert(mst);
        jQuery("#msg").text(mst);
        //jQuery(".alertTrigger").trigger("click");

    },
    };

</script>



