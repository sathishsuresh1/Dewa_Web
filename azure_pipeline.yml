trigger:
- development  # Trigger on development branch, adjust as needed

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'

stages:

# 1. Build Stage
- stage: Build
  displayName: 'Build Stage'
  jobs:
    - job: BuildJob
      displayName: 'Build Job'
      steps:
        # 1. Install the .NET SDK
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '8.x'
            installationPath: $(Agent.ToolsDirectory)/dotnet

        # 2. Install NuGet Tool
        - task: NuGetToolInstaller@1
          inputs:
            versionSpec: '5.x'

        # 3. Restore NuGet Packages
        - task: NuGetCommand@2
          inputs:
            command: 'restore'     
            restoreSolution: '**/packages.config'
            feedsToUse: 'config'
            nugetConfigPath: 'nuget.config'
            packagesDirectory: '$(Build.SourcesDirectory)/packages'

        # 4. Build the solution 
        - task: MSBuild@1
          displayName: 'Build using MSBuild' 
          inputs:
            solution: '**/*.sln'
            msbuildArchitecture: 'x86'
            configuration: '$(buildConfiguration)'
            platform: 'Any CPU'

        # 5. Copy Files
        - task: CopyFiles@2
          inputs:
            contents: '**/bin/Release/**/*'
            targetFolder: '$(Build.ArtifactStagingDirectory)'

        # 6. Archive the artifacts
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/Release.zip'
            replaceExistingArchive: true

        # 7. Publish Artifacts
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)/Release.zip'
            artifactName: 'drop'
            publishLocation: 'Container'

# 2. QA Stage
- stage: QA
  displayName: 'QA Approval Stage'
  dependsOn: Build  # QA stage runs after Build stage
  condition: succeeded()
  jobs:
    - deployment: QADeployment
      displayName: 'Deploy to QA'
      environment: 'QA'  # Ensure the QA environment exists in Azure DevOps
      strategy:
        runOnce:
          deploy:
            steps:
              # Step 1: Wait for QA approval
              # - task: ManualValidation@1
              #   inputs:
              #     instructions: 'Awaiting QA approval to proceed with deployment..'
              #     notifyUsers: 'Sathish S'
                  

              # Step 2: Download the artifacts
              - download: current
                artifact: 'drop'  # Name of the published artifact
                displayName: 'Download build artifacts'

              # Step 3: Add QA-approved tag after download  
              # - task: BuildTags@1
              #   displayName: 'Add QA-approved tag'
              #   inputs:
              #     tags: 'QA-approved'
              
  # 3. Staging Stage
- stage: Staging
  displayName: 'Staging Approval Stage'
  dependsOn: QA  # Staging stage runs after QA approval
  condition: succeeded()
  jobs:
    - deployment: StagingDeployment
      displayName: 'Deploy to Staging'
      environment: 'Staging'  # Ensure the Staging environment exists in Azure DevOps
      strategy:
        runOnce:
          deploy:
            steps:
              # Step 1: Wait for Staging approval
              # - task: ManualValidation@1
              #   inputs:
              #     instructions: 'Awaiting Staging approval to proceed with deployment.'
              #     notifyUsers: 'Sathish S'

              # Step 2: Download the artifacts for Staging
              - download: current
                artifact: 'drop'
                displayName: 'Download build artifacts for Staging'
              
              # Step 3: Add QA-approved tag after download
              # - task: BuildTags@1
              #   displayName: 'Add QA-approved tag'
              #   inputs:
              #     tags: 'QA-approved'
              
